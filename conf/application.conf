# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName=slack-notifications

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule" # required for internal-auth-client
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Microservice specific config

microservice {
  services {
    internal-auth {
      host = localhost
      port = 8470
    }

    teams-and-repositories {
      host = localhost
      port = 9015
    }

    user-management {
      host = "localhost"
      port = 8878
    }
  }
}

slack {
  webhookUrl = null
  notification.enabled = true
  apiUrl = null
  botToken = null
}

alerts {
  slack {
    noTeamFound {
      channel   = "#event-missing-slack-channel"
      username  = "slack-notifications"
      iconEmoji = ""
      text      = "*{service}* failed to deliver slack message to intended channels. Errors are shown below:"
    }
  }
}

exclusions {
  notRealTeams = "" # comma separated list
  notRealGithubUsers = "" # comma separated list
}

auth {
  authorizedServices = [
    {
      name = test
      password = "dGVzdA==" # 'test' (passwords are base64 encoded)
      displayName = "My Bot"
      userEmoji = ":male-mechanic:"
    }
  ]
}
